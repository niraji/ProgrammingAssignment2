q()
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
str(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
lm.1 <- lm(SAheart$chd~SAheart$age+SAheart$alcohol+SAheart$obesity+SAheart$tobacco+SAheart$typea+SAheart$ldl)
summary(lm.1)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
values
glm <- glm(SAheart$chd~SAheart$age+SAheart$alcohol+SAheart$obesity+SAheart$tobacco+SAheart$typea+SAheart$ldl, family="binomial")
summary(glm)
lm.1$fitted
predict(lm.1)
missClass = function(trainSA$chd,glm$fitted){sum(((glm$fitted > 0.5)*1) != trainSA$chd)/length(trainSA$chd)}
glm1 <- glm(trainSA$chd~trainSA$age+trainSA$alcohol+trainSA$obesity+trainSA$tobacco+trainSA$typea+train$SA$ldl, family="binomial")
glm1 <- glm(trainSA$chd~trainSA$age+trainSA$alcohol+trainSA$obesity+trainSA$tobacco+trainSA$typea+train$SA$ldl, family="binomial", data=trainSA)
trainSA
trainSA$chd
glm1 <- glm(trainSA$chd~trainSA$age+trainSA$alcohol+trainSA$obesity+trainSA$tobacco+trainSA$typea+trainSA$ldl, family="binomial", data=trainSA)
summary(glm1)
missClass = function(trainSA$chd,glm$fitted){sum(((glm$fitted > 0.5)*1) != trainSA$chd)/length(trainSA$chd)}
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(glm1, trainSA))
missClass(trainSA$chd, predict(glm1$fitted))
missClass(trainSA$chd, glm1$fitted)
glm2 <- glm(testSA$chd~testSA$age+testSA$alcohol+testSA$obesity+testSA$tobacco+testSA$typea+testSA$ldl, family="binomial", data=testSA)
missClass(testSA$chd, glm2$fitted)
missClass(testSA$chd, predict(glm2, testSA))
missClass(testSA$chd, predict(glm1, testSA))
missClass(testSA$chd, glm1$fitted)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive=olive[,-1]
str(olive)
install.packages("tree")
library(tree)
tree1 <- tree(Area ~ Palmitic + Palmitoleic + Stearic + Oleic + Linoleic + Linolenic + Arachidic + + Eicosenoic, data="olive")
tree1 <- tree(Area ~ Palmitic + Palmitoleic + Stearic + Oleic + Linoleic + Linolenic + Arachidic + Eicosenoic, data="olive")
tree1 <- tree(Area ~ Palmitic + Palmitoleic + Stearic + Oleic + Linoleic + Linolenic + Arachidic + Eicosenoic, data=olive)
plot(tree1)
text(tree1)
tree1
set.seed(53535)
xValues=seq(0,2*pi,length=100)
yValues=rnorm(100)+sin(xValues)
plot(x,y)
plot(xValues,yValues)
library(simpleboot)
install.packages("simpleboot")
library(simpleboot)
sata(airquality)
data(airquality)
attach(airquality)
names(airquality)
p75 <- function(x) { quantile(airquality$Wind,0.75) }
p75
p75 <- function(airquality$Wind) { quantile(airquality$Wind,0.75) }
one.boot(airquality$Wind, quantile, R=1000, probs=.75)
quantile(airquality$Wind, c(0.75))
plot(airquality$Wind)
lines()
p75 <- function(x){
quantile(x, 0.75)
}
bootdata <- one.boot(x, p75, R=1000)
function(airquality$Wind)
function(Wind)
airquality$Wind
x=aiarquality$Wind
x=airquality$Wind
function(x)
p75 <- function(x){quantile(x, 0.75)
p75 <- function(x){quantile(x, 0.75)}
function(airquality$Wind)
x=airquality$Wind
function(x)
p75
p75 <- function(x){quantile(x, 0.75)}
one.boot(airquality$targetVar, q75, R=1000)
one.boot(airquality$Wind, q75, R=1000)
quantile(x, probs=c(0.75))
bootdata <- one.boot(x, p75, R=1000)
dim(bootdata)
names(bootdata)
bootdata
bootdata <- one.boot(x, p75, R=1000)
sd(bootdata$t)
set.seed(53535)
xValues = seq(0,2*pi,length=100)
yValues = rnorm(100) + sin(xValues)
data <- data.frame(xValues, yValues)
dim(data)
ns1 <- ns(data$xValues, df=1)
load("~/Desktop/coursera/Data analysis/quiz/.RData")
dim(movies.txt)
dim(movies)
plot(movies)
str(movies)
names(movies)
plot(movies$score, movies$rating)
plot(movies$score, movies$genre)
plot(movies$genre)
plot(movies$rating)
plot(movies$rating, movies$score
plot(movies$rating, movies$score)
plot(movies$rating, movies$score, col="blue")
plot(movies$rating, movies$score, col="blue", pch=25)
plot(movies$rating, movies$score, col="blue", pch=19)
ggplot(movies$rating)
plot(movies$rating)
ggplot(movies$rating, movies$score)
plot(movies$rating, movies$score)
plot(movies$box.office, movies$score)
plot(movies$box.genre, movies$score)
plot(movies$genre, movies$score)
source("http://www.openintro.org/stat/data/present.R")
present.R
list
present.R
present
present$girls
$girls
plot(present$years, present$girls)
plot(present$years)
plot(present$years,present$girls)
plot(present$girls, present$years)
present(max)
max?
max(present$girls)
max(present$girls, years)
length(grep(2082052))
tapply(present$years, present$girls, max)
tapply(present$girls, present$years max)
tapply(present$girls, present$years, max)
present$years
view(present)
edit(present)
present$years
tapply(present$girls, present$year, max)
tapply(present$year, present$girls, max)
sapply(present$year, present$girls, max)
sapply(present$girls, max)
sapply(present$girls, mean)
max(present)
min(present)
which.max(present)
which.max(present$girls)
present
mean(present$girls)
max(present$girls)
plot(present$boys, present$girls)
plot(present$boys, present$year)
plot(present$years, present$boys)
plot(present$year, present$boys)
which.max(present)
which.max(present$boys)
which.max(present$girls)
which.max(present$year)
plot(present$year, present$boys/(present$boys + present$girls)
plot(present$year, present$boys/(present$boys + present$girls))
plot(present$year, present$boys/(present$boys + present$girls))
plot(present$boys,present$girls)
plot(present$girls,present$boys)
row(22)
dim(present)
which.max(,present$girls)
which.max[],present$girls]
which.max(,present$girls)
?which.max
if(present$girls > present$boys), present$years
if{(present$girls > present$boys), present$years}
if(present$girls > present$boys), present$years
if(present$girls > present$boys), present$years
hist(present$girls, present$boys)
hist(present$boys)
barplot(present$boys)
barplot(present$boys, present$girls)
plot(present$boys ~ present$girls)
plot(present$boys)
plot(present$boys, present$girls)
present$boys > present$girls
count(present$boys < present$girls)
num(present$boys < present$girls)
find(present$boys < present$girls)
length(present$boys < present$girls)
length(present$boys > present$girls)
numbers(present$boys < present$girls)
number(present$boys < present$girls)
present$boys < present$girls
plot(present$boys/present$girls, present$year)
plot(present$year, present$boys/present$girls)
max(present$year,present$boys-present$girls)
max(present$boys-present$girls)
which.max(present$boys-present$girls)
present$boys-present$girls
plot(present$boys-present$girls, present$years)
plot(present$boys-present$girls, present$year)
plot(, present$year, present$boys-present$girls)
plot(present$year, present$boys-present$girls)
source("http://www.openintro.org/stat/data/cdc.R")
cdc
cdc
ls
source("http://www.openintro.org/stat/data/cdc.R")
summary(cdc)
names(cdc)
dim(cdc)
str(cdc)
smoke100
cdc$smoke100
males <- cdc[,cdc$gender==1]
males
str(males)
cdc$gender==1
summary(cdc)
table(cdc$genhlth)
table(cdc$genhlth)/20000
barplot(table(cdc$genhlth)
barplot(table(cdc$genhlth))
barplot(table(cdc$genhlth))
barplot(table(cdc$genhlth))
gender.smoke= table(cdc$gender, cdc$smoke)
gender.smoke
mosaicplot(gender.smoke)
str(cdc)
data <- cdc[cdc$age<23, cdc$smoke100==1]
data <- subset[cdc$age<23, cdc$smoke100==1]
data <- subset[cdc$age<23 & cdc$smoke100==1]
data <- subset[cdc,cdc$age<23, cdc$smoke100==1]
data <- subset[cdc,cdc$age<23, cdc$smoke100=1]
data <- subset[cdc,cdc$age<23, cdc$smoke100=='1']
data <- subset[cdc,cdc$age<23 &cdc$smoke100==1]
data <- subset[cdc,cdc$age<23]
data <- subset(cdc,cdc$age<23)
data <- subset(cdc,cdc$age<23, cdc$smoke100==1)
data <- subset(cdc,cdc$age<23 & cdc$smoke100==1)
num(data)
data
dim(data)
str(cdc)
BMI <- cdc$weight/cdc$height*(703)
boxplot(BMI ~ cdc$genhlth)
BMI <- (cdc$weight/cdc$height^2)*703
boxplot(BMI ~ cdc$genhlth)
plot(cdc$weight, cdc$wtdesire)
plot(cdc$wtdesire, cdc$weight)
￼load(url("http://www.openintro.org/stat/data/kobe.RData"))head(kobe)
￼load(url("http://www.openintro.org/stat/data/kobea
load(url("http"//www/openintro.org/stat/data/kobe.RData))
load(url("http"://www/openintro.org/stat/data/kobe.RData))
load(url("http://www/openintro.org/stat/data/kobe.RData"))
load(url("http://www.openintro.org/stat/data/kobe.RData"))
head(kobe)
str(kobe)
kobe$basket[1:9]
￼kobe_streak <- calc_streak(kobe$basket)barplot(table(kobe_streak))
￼kobe_streak <- calc_streak(kobe$basket)
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
boxplot(kobe_streak)
hist(kobe_streak)
outcomes <- c("heads", "tails")
sample(outcomes, size=1, replace=TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2,                                                                         0.8))
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2,                                                                         0.8))
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2,0.8))
table(sim_unfair_coin)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes)
sim_basket <- sample(outcomes, size=1, replace=TRUE)
kobe$basket
sim_basket
calc_streak(sim_basket)
kobe_streak
sim_basket <- calc_streak(sim_basket)
dim(sim_sbu)
dim(sim_basket)
sim_basket
sim_basket <- sample(outcomes, size=1, replace=TRUE)
sim_basket
sim_basket <- sample(outcomes, size=100, replace=TRUE)
sim_basket
sim_basket <- calc_streak(sim_basket)
sim_basket
plot(sim_basket)
barplot(sim_basket)
barplot(kobe_streak)
hist(sim_basket)
hist(kobe_streak)
0.51*0.51*0.49
0.49*.49*0.51
0.51*0.51
.23*.61
dbinom(3, size = 6, p=0.51)
dbinom(2, size = 3, p=0.51)
0.99*.055
.99*(1-.055)
dbinom(50, size = 160, p=0.28)
nom(50, size = 160, p=0.28)
load(url("http://bit.ly/dasi_gss_data"))
names(dasi_gss)
names(dasi_gss_data)
names("dasi_gss_data")
str("daso_gss_data")
str("dasi_gss_data")
load(url("http://bit.ly/dasi_anes_data"))
(105-100)/(10/sqrt(40))
pnorm(50,44.8,5.68)
pnorm(9.51,10,4.65/sqrt(40))
1-0.252559
4.65/sqrt(40)
pnorm(9.51, 10, .7352)
qnorm(.50)
qnorm(0.67)
.09*.90 + .91*.02
90/92
.91*9
.10*9
.90*9
91*.02
.98*91
8.1/(8.1+1.82)
median(-5, -4, -3, -2, 1, 7, 10, 11, 17, 18)
mean(-5, -4, -3, -2, 1, 7, 10, 11, 17, 18)
med(-5, -4, -3, -2, 1, 7, 10, 11, 17, 18)
qnorm(2.33)
qnorm(0.025)
qnorm(.01)
sd(3,4,5)
var(3,4,5)
variance(3,4,5)
sqrt((1.29*18)/4)
sq((1.29*18)/4)
(1.29*18)/4
5.808*5.805
(1.28*18)/4
5.76*5.76
sqrt(150)
sqrt(500)
-3.48+1.65*1.3
-3.48-1.65*1.3
-3.48-1.96*1.3
-3.48+1.96*1.3
75/40.13
104*7/104
21/24
7/50
.14*50
3/24
.125*50
3/50
7/50
=.14*50
.14*50
224/295
sqrt((.759322*(1-.759322)/295))
71/295
(.759322*(1-.759322)
.759322*(1-.759322)
.759322*(1-.759322)/224
(.759322*(1-.759322))/224
71/295
(0.240678*(1-0.240678))/71
sqrt(0.002573973+0.0008158576)
71/295
224/295
0.759322*(1-0.759322)
0.1827521/224
0.240678*(1-0.240678)/71
(0.240678*(1-0.240678))/71
0.002573973+0.0008158576
sqrt(0.003389831)
.75^2
.915^2
.88^4
.88*.88*.88*.88
1-.599
248.3-244.8
195528-1627
1627/2
193901/828
813.5/234.18
1627/195528
sqrt(.2*.8/100)
sqrt(.2*.8/3226)
sqrt(.24*76/3226)
24/625
.0384*10000
24/625*10000
24/46
46/625
.05*.93
.0465+.95*.03
.0465/.075
15079-3820
(3820/243)/(15079/251)
1-(3820/243)/(15079/251)
24/625
24*.0384
24/46
24/112
625*.21
46/625
=.0736*46
.0736*46
.24/112
24/112
22/513
.25*625
46/625
.0736*24
30/625
24/625
8/625
579/625
1-.9264
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
"## This is a markdown file"
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
x <- c("a", "b", "c", "d")
for (i in 1:4) {print(x[i])}
x
for (letter in x) {print(letter)}
library(datasets)
data(iris)
head(iris)
data <- subset(iris, Species=="virginica")
head(data)
mean(data$Sepal.Length)
data$Sepal.Length
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
absdif(26.66364, 15.1)
dif(26.66364, 15.1)
dif(26.66364, 15.1
dif(26.66364, 15.1)
diff(26.66364, 15.1)
debug(ls)
ls
ls?
?ls
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
abs(diff(with(mtcars, tapply(mpg, cyl, mean)))
abs(diff(with(mtcars, tapply(mpg, cyl, mean))))
diff(26.66364-15.1)
abs(26.66364-15.1)
abs(15.1-26.66364)
debug(ls)
ls
}
setwd("~/Desktop/coursera/ProgrammingAssignment2")
source("cachematrix.R")
